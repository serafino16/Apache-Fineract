pipeline {
    agent any

    parameters {
        choice(name: 'CONTAINER_ENV', choices: ['dev', 'stage', 'prod'], description: 'Choose the environment')
    }

    environment {
        IMAGE_TAG = "${GIT_COMMIT}"
        AWS_ACCOUNT_ID = "123456789012"
        EKS_NAMESPACE = "apache-fineract"
        HELM_RELEASE_NAME = "fineract-release"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Set Dynamic Environment Vars') {
            steps {
                script {
                    if (params.CONTAINER_ENV == 'dev') {
                        env.AWS_REGION = 'eu-west-1'
                        env.ECR_REPO_NAME = 'fineract-dev'
                        env.EKS_CLUSTER_NAME = 'eks-dev'
                    } else if (params.CONTAINER_ENV == 'stage') {
                        env.AWS_REGION = 'eu-west-2'
                        env.ECR_REPO_NAME = 'fineract-stage'
                        env.EKS_CLUSTER_NAME = 'eks-stage'
                    } else if (params.CONTAINER_ENV == 'prod') {
                        env.AWS_REGION = 'eu-central-1'
                        env.ECR_REPO_NAME = 'fineract-prod'
                        env.EKS_CLUSTER_NAME = 'eks-prod'
                    }

                    env.ECR_URL = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                    env.FULL_IMAGE = "${env.ECR_URL}/${env.ECR_REPO_NAME}:${env.IMAGE_TAG}"
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${FULL_IMAGE} ."
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                        docker push ${FULL_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to EKS using Helm') {
            steps {
                script {
                    sh """
                        aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}
                        helm upgrade --install ${HELM_RELEASE_NAME} ./helm/fineract-chart \\
                          --namespace ${EKS_NAMESPACE} \\
                          --create-namespace \\
                          --set image.repository=${ECR_URL}/${ECR_REPO_NAME} \\
                          --set image.tag=${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo " Deployment to ${params.CONTAINER_ENV} (${AWS_REGION}) succeeded!"
        }
        failure {
            echo " Deployment failed for ${params.CONTAINER_ENV} (${AWS_REGION})"
        }
    }
}


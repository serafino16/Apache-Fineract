pipeline {
    agent any

    parameters {
        choice(name: 'CONTAINER_ENV', choices: ['dev', 'stage', 'prod'], description: 'Choose the container environment')
        choice(name: 'AWS_REGION', choices: ['eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-central-1'], description: 'Choose the AWS region')
    }

    environment {
        AWS_ACCOUNT_ID = "123456789012"
        EKS_NAMESPACE = "apache-fineract"
        HELM_RELEASE_PREFIX = "fineract"
        IMAGE_TAG = "${GIT_COMMIT}"
    }

    
    def services = [
        
        "fineract-api",
        "fineract-notification-service",
        "fineract-identity-service",
        "fineract-scheduler",
        "fineract-accounting",
        "fineract-deposit-account",
        "fineract-reporting",
        "fineract-payment-gateway",
        "fineract-portfolio",

        
        "mifosx-api",
        "mifosx-identity-service",
        "mifosx-portfolio-service",
        "mifosx-payment-service",
        "mifosx-notification-service",
        "mifosx-reporting-service",
        "mifosx-scheduler-service",
        "mifosx-accounting-service",
        "mifosx-deposit-service"
    ]

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/serafino16/Apache-Fineract.git'
            }
        }

        stage('Set Environment Variables') {
            steps {
                script {
                    def repoPrefixMap = [
                        "dev":    ["eu-west-1":"fineract-dev",    "eu-west-2":"fineract-dev",    "eu-west-3":"fineract-dev",    "eu-central-1":"fineract-dev"],
                        "stage":  ["eu-west-1":"fineract-stage",  "eu-west-2":"fineract-stage",  "eu-west-3":"fineract-stage",  "eu-central-1":"fineract-stage"],
                        "prod":   ["eu-west-1":"fineract-prod",   "eu-west-2":"fineract-prod",   "eu-west-3":"fineract-prod",   "eu-central-1":"fineract-prod"]
                    ]

                    def clusterMap = [
                        "dev":    ["eu-west-1":"eks-dev-1",    "eu-west-2":"eks-dev-2",    "eu-west-3":"eks-dev-3",    "eu-central-1":"eks-dev-c1"],
                        "stage":  ["eu-west-1":"eks-stage-1",  "eu-west-2":"eks-stage-2",  "eu-west-3":"eks-stage-3",  "eu-central-1":"eks-stage-c1"],
                        "prod":   ["eu-west-1":"eks-prod-1",   "eu-west-2":"eks-prod-2",   "eu-west-3":"eks-prod-3",   "eu-central-1":"eks-prod-c1"]
                    ]

                    env.ECR_REPO_PREFIX = repoPrefixMap[params.CONTAINER_ENV][params.AWS_REGION]
                    env.EKS_CLUSTER_NAME = clusterMap[params.CONTAINER_ENV][params.AWS_REGION]
                    env.AWS_REGION = params.AWS_REGION
                    env.ECR_URL = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    sh """
                      aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                    """

                    for (service in services) {
                        def imageFullName = "${ECR_URL}/${ECR_REPO_PREFIX}-${service}:${IMAGE_TAG}"
                        echo "Building and pushing image for service: ${service} -> ${imageFullName}"

                        sh """
                          docker build -t ${imageFullName} ./services/${service}
                          docker push ${imageFullName}
                        """
                    }
                }
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}"

                    for (service in services) {
                        def releaseName = "${HELM_RELEASE_PREFIX}-${service}"
                        def chartPath = "./helm/${service}-chart"
                        def imageRepo = "${ECR_URL}/${ECR_REPO_PREFIX}-${service}"

                        echo "Deploying ${service} with Helm release ${releaseName}"

                        sh """
                          helm upgrade --install ${releaseName} ${chartPath} \\
                            --namespace ${EKS_NAMESPACE} --create-namespace \\
                            --set image.repository=${imageRepo} \\
                            --set image.tag=${IMAGE_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo " Successfully deployed all Apache Fineract & Mifos X microservices to ${params.CONTAINER_ENV} in ${params.AWS_REGION}"
        }
        failure {
            echo " Deployment failed in ${params.CONTAINER_ENV} environment and ${params.AWS_REGION} region."
        }
    }
}
